lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
log(-1)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(5)
printmessage(-1)
printmessage(0)
printmessage(a)
View(printmessage)
View(printmessage)
View(printmessage)
View(printmessage)
printmessage(NA)
View(printmessage)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage2()
printmessage2()
x <- log(-1)
printmessage2(x)
options(error = recover)
read.csv("nosuchfile")
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum((flags$orange))
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colorrs, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(c(3,4,5,5,5,6,6), unique)
unique_vals <- lapply(flags), unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flag, unique)
sapply(flags, unique)
View(unique_vals)
lapply(unique_val, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
pwd
pwd()
pwd()
cd()
search(working directory)
pwd(print working directory)
library(swirl)
swirl()
ls(plants)
ls()
?ls
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants[1:10])
head(plants,x = 10)
head(plants, 10)
tail(15)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,prob = c(0.3,0.7))
flips <- sample(c(0,1),100, replacement = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100, prob = c(0.3,0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(10)
rpois(10,5)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot subtitle")
plot(cars, sub = "My Plot Subtitle")
?plot
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot()
?boxplot
boxplot(formalula = mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl::install_course("Advanced R Programming")
swirl()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "d39b111aaae64dc2a9ff", secret = "760fa2d393497a3452203867270aafa90bf07e60")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "d39b111aaae64dc2a9ff", secret = "760fa2d393497a3452203867270aafa90bf07e60")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
repo_list <- content(req)
repo_list
req
github_token
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
repo_list <- content(req)
repo_list
answer1 <- c()
for (i in 1:length(repo_list)){
repo <- repo_list[[i]]
if(repo$name == "datasharing"){
answer1 = repo
break
}
}
gtoken
github <- oauth_endpoints("github")
myapp
github_token
github_token <- oauth2.0_token(github, myapp)
github_token
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
myapp <- oauth_app(appname = "Week2Quiz", key = "d39b111aaae64dc2a9ff", secret = "760fa2d393497a3452203867270aafa90bf07e60")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Week2Quiz", key = "d39b111aaae64dc2a9ff", secret = "760fa2d393497a3452203867270aafa90bf07e60")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- GET("http://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 = content(req)
json1
> oauth_endpoints("github")
oauth_endpoints("github")
myapp <- oauth_app(appname = "Week2Quiz", key = "d39b111aaae64dc2a9ff", secret = "89a20590e6e7e0510cc2146aea8b26d5ed2721a4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Youtube_Michael_Galarnyk",
key = "8758a6bf9a146e1da0c1",
secret = "b9504edde46b794414495bd9c33ea28cbfd87824")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Week2Quiz", key = "d39b111aaae64dc2a9ff", secret = "89a20590e6e7e0510cc2146aea8b26d5ed2721a4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp <- oauth_app("github", key = "d39b111aaae64dc2a9ff", secret = "89a20590e6e7e0510cc2146aea8b26d5ed2721a4", redirect_uri = "http://localhost:1410" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "d39b111aaae64dc2a9ff", secret = "578a8fbdffa67c339de72195c84e9d6f9f99f489", redirect_uri = "http://localhost:1410")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
json1 = content(req)
install.packages("httpuv")
install.packages("httr")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
parse(25081985)
parse("25081985")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 1, minutes = 34, seconds = 54)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Sinapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
llast_time
last_time
?interval
how_long <- intervale(last_time,arrive)
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
x <- c(1,2,3,4,5,6)
fasdfa
fag
library(swirl)
swirl()
install_from_swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
rug(high, low)
rug(high)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta" lwd = 4)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <-table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow = c(2,1), mar = c(4,4,2,1))
east <- subset(pollution, pollution$region == "east")
east <- subset(pollution, region == "east")
east
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution$pm25, region == "west"), col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
swirl::swirl()
qplot(disp, hwy,data = mpg, geom = c("point", "Smooth"), facets = .~drv )
qplot(disp, hwy,data = mpg, geom = c("point", "smooth"), facets = .~drv )
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv )
g <- ggplot(mpg, displ ~ hwy)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 0.5)
g + geom_point(size = 4, alpha = 0.5, aes(color = drv))
g + geom_point(size = 4, alpha = 0.5, aes(color = drv))+ labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Highway Mileage" )
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Highway Mileage" )
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 0.5) +geom_smooth(size =4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
qplot(myx, myy, type = "lm", ylim = c(-3,3))
qplot(myx, myy, type = "l", ylim = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
ggplot(testdat, aes(c(x = myx, y = myy)))
ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line()+ ylim(-3,3)
g + geom_line()+ coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point()+facet_grid(drv~cyl, margins = TRUE)
g + geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")+ labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
ccounts
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")+1
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 0.5)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd]
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)+geom_smooth("lm", size = 3, color = "pink")
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth("lm", size = 3, color = "pink")
(g+geom_point(alpha=1/3)+facet_grid(cut~car2))
g+geom_point(alpha=1/3)+facet_grid(cut~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
swirl::swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(pm1))
mean(is.na(x1))
summary(pm0)
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log(x0),log(x1))
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
intersect(site0,site1)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, state.code %in% country.site)
cnt0 <- 1
cnt0 <- subset(pm0, State.Code == 36 & country.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0$Date), "5Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0,x0sub, pch = 20)
abline(h = median(x0sub), na.rm = TRUE)
abline(h = median(x0sub, na.rm = TRUE), lwd =2)
plot(dates1,x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd =2)
rng <- range(x0sub,x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn)
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.fram(state = names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0,d1, by = "state")
dim(mrg)
head(merge)
head(mrg)
with(mrg, plot(reo(1,52), mrg[,2], xlim = c(0.5,2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(0.5,2.5)))
with(mrg, plot(rep(2,52), mrg[,3], xlim = c(0.5,2.5)))
with(mrg, plot(rep(2,52), mrg[,3])
)
with(mrg, plot(rep(2,52), mrg[,3]))
with(mrg, points(rep(2,52), mrg[,3]))
segments(x,y)
segments(x0,y0)
1
segments(rep(1,52), mrg[,2], rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
setwd("~/GitHub/RepData_PeerAssessment1")
library(knitr)
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
rmarkdown::render(PA1_template.Rmd)
rmarkdown::render("PA1_template.Rmd")
rmarkdown::render("PA1_template.Rmd", output_format = "html_document", output_file = "PA1_template.html")
